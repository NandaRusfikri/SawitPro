// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interfaces.go

// Package repository is a generated GoMock package.
package repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepositoryInterface is a mock of RepositoryInterface interface.
type MockRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryInterfaceMockRecorder
}

// MockRepositoryInterfaceMockRecorder is the mock recorder for MockRepositoryInterface.
type MockRepositoryInterfaceMockRecorder struct {
	mock *MockRepositoryInterface
}

// NewMockRepositoryInterface creates a new mock instance.
func NewMockRepositoryInterface(ctrl *gomock.Controller) *MockRepositoryInterface {
	mock := &MockRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepositoryInterface) EXPECT() *MockRepositoryInterfaceMockRecorder {
	return m.recorder
}

// FindUser mocks base method.
func (m *MockRepositoryInterface) FindUser(input FindUserInput) (FindUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindUser", input)
	ret0, _ := ret[0].(FindUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindUser indicates an expected call of FindUser.
func (mr *MockRepositoryInterfaceMockRecorder) FindUser(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindUser", reflect.TypeOf((*MockRepositoryInterface)(nil).FindUser), input)
}

// GetTestById mocks base method.
func (m *MockRepositoryInterface) GetTestById(ctx context.Context, input GetTestByIdInput) (GetTestByIdOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTestById", ctx, input)
	ret0, _ := ret[0].(GetTestByIdOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTestById indicates an expected call of GetTestById.
func (mr *MockRepositoryInterfaceMockRecorder) GetTestById(ctx, input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTestById", reflect.TypeOf((*MockRepositoryInterface)(nil).GetTestById), ctx, input)
}

// InsertHistoryLogin mocks base method.
func (m *MockRepositoryInterface) InsertHistoryLogin(user_id int) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertHistoryLogin", user_id)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertHistoryLogin indicates an expected call of InsertHistoryLogin.
func (mr *MockRepositoryInterfaceMockRecorder) InsertHistoryLogin(user_id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertHistoryLogin", reflect.TypeOf((*MockRepositoryInterface)(nil).InsertHistoryLogin), user_id)
}

// UpdateProfile mocks base method.
func (m *MockRepositoryInterface) UpdateProfile(input UpdateProfileInput) (FindUserOutput, SchemaError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProfile", input)
	ret0, _ := ret[0].(FindUserOutput)
	ret1, _ := ret[1].(SchemaError)
	return ret0, ret1
}

// UpdateProfile indicates an expected call of UpdateProfile.
func (mr *MockRepositoryInterfaceMockRecorder) UpdateProfile(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProfile", reflect.TypeOf((*MockRepositoryInterface)(nil).UpdateProfile), input)
}

// UserLogin mocks base method.
func (m *MockRepositoryInterface) UserLogin(input UserLoginInput) (UserLoginOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserLogin", input)
	ret0, _ := ret[0].(UserLoginOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserLogin indicates an expected call of UserLogin.
func (mr *MockRepositoryInterfaceMockRecorder) UserLogin(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserLogin", reflect.TypeOf((*MockRepositoryInterface)(nil).UserLogin), input)
}

// UserRegister mocks base method.
func (m *MockRepositoryInterface) UserRegister(input UserRegistrationInput) (UserRegistrationOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserRegister", input)
	ret0, _ := ret[0].(UserRegistrationOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserRegister indicates an expected call of UserRegister.
func (mr *MockRepositoryInterfaceMockRecorder) UserRegister(input interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserRegister", reflect.TypeOf((*MockRepositoryInterface)(nil).UserRegister), input)
}
